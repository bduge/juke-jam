#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
var debug = require('debug')('api:server')
var http = require('http')
var mongoose = require('mongoose')
var connectSocket = require('../socket')
require('dotenv').config()

// mongoose.connect('mongodb://localhost:27017/juke_jam', {
//     useNewUrlParser: true,
//     useUnifiedTopology: true,
// })

let dbUser = process.env.DB_USER
let dbPassword = process.env.DB_PASSWORD
let dbName = process.env.DB_NAME
let uri = `mongodb+srv://${dbUser}:${dbPassword}@juke-jam.8td4p.mongodb.net/${dbName}?retryWrites=true&w=majority`

mongoose.connect(uri, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
})

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000')
app.set('port', port)

/**
 * Create HTTP server.
 */

var server = http.createServer(app)
const io = connectSocket(server)
app.set('io', io)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10)

    if (isNaN(port)) {
        // named pipe
        return val
    }

    if (port >= 0) {
        // port number
        return port
    }

    return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges')
            process.exit(1)
            break
        case 'EADDRINUSE':
            console.error(bind + ' is already in use')
            process.exit(1)
            break
        default:
            throw error
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address()
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
    debug('Listening on ' + bind)
}
